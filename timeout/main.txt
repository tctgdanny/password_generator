package main

import (
	"flag"
	"fmt"
	"strconv"

	"github.com/thecoretg/pwgen/pwgen"
)

func main() {
	// Pointer flags for user customizability of readout
	amountPtr := flag.Int("amount", 5, "number of passwords to generate")
	lengthPtr := flag.String("length", "5", "length of the words to use")

	// Alternate shorthand pointer flags
	flag.IntVar(amountPtr, "a", 5, "number of passwords to generate (alternate)")
	flag.StringVar(lengthPtr, "l", "5", "length of the words to use (alternate)")

	// Help output (-h)
	flag.Usage = func() {
		fmt.Println("Usage: pwgen --amount [num] --length [num]")
		fmt.Println("  --amount, -a: number of passwords to generate (default 5)")
		fmt.Println("  --length, -l: length of the words to use (default 5, must be number from 4 and 10)")
	}

	flag.Parse()

	// Convert length string to an integer and verify it is a valid number from 4-8
	length, err := strconv.Atoi(*lengthPtr)
	if err != nil || length < 4 || length > 10 {
		fmt.Println("Error: 'length' must be a number from 4 to 10")
		return
	}

	wordsList, err := pwgen.LoadWords(*lengthPtr)
	if err != nil {
		fmt.Println("Error: could not get words list")
		return
	}

	pwgen.GeneratePasswords(wordsList, *amountPtr)
}
